{"version":3,"sources":["reportWebVitals.js","components/Dashboard/listItems.js","components/Dashboard/Styles.js","components/Config.js","components/Columns.js","components/Table.js","components/Dashboard/Title.js","text/about.md","components/About.js","components/Chart/single.js","components/Statistics.js","Dashboard.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","mainListItems","ListItem","button","component","href","ListItemIcon","ListItemText","primary","useStyles","makeStyles","theme","root","display","toolbar","paddingRight","toolbarIcon","alignItems","justifyContent","padding","mixins","appBar","zIndex","drawer","transition","transitions","create","easing","sharp","duration","leavingScreen","appBarShift","marginLeft","width","enteringScreen","menuButton","marginRight","menuButtonHidden","title","flexGrow","drawerPaper","position","whiteSpace","drawerPaperClose","overflowX","spacing","breakpoints","up","appBarSpacer","content","height","overflow","container","paddingTop","paddingBottom","paper","flexDirection","fixedHeight","yearToRange","year","toString","YEARS","citation","citations","push","parseInt","split","Set","sort","CODES","codename","codes","getData","range_key","citations_data","data","dataArray","Object","assign","filterCodeNames","filters","codeNames","codeName","filter","includes","getCodeCitations","line_data","isNaN","TooltipText","tooltip","text","Tooltip","placement","arrow","className","Table","props","state","columns","options","print","filterType","sortOrder","name","direction","rowsPerPage","selectableRows","event","this","setState","target","value","defaultValue","onChange","handleYearChange","map","x","label","customBodyRenderLite","dataIndex","row","rel","types","acceleration","methods","tags","licenses","color","searchUrl","encodeURIComponent","Button","React","Component","Title","Typography","variant","gutterBottom","children","MarkdownPane","markdownFile","markdown","classes","fetch","res","templateString","templateVars","packageJson","call","Grid","item","xs","Paper","Fragment","source","Home","aboutMD","THEME","axis","legend","fontSize","SingleChart","decodeURIComponent","useParams","reverseCitations","yearBegin","slice","reverse","point","length","ratio","Math","pow","toFixed","getTitle","id","nivoChart","legend_list","margin_right","anchor","justify","translateX","translateY","itemsSpacing","itemDirection","itemWidth","itemHeight","itemOpacity","symbolSize","symbolShape","symbolBorderColor","effects","on","style","itemBackground","margin","top","right","bottom","left","xScale","type","yScale","min","max","stacked","axisTop","axisRight","axisBottom","orient","legendOffset","legendPosition","axisLeft","pointSize","pointColor","pointBorderWidth","pointBorderColor","from","pointLabelYOffset","enableCrosshair","useMesh","legends","animate","costGraph","groups","Commercial","lines","group","license","sourceGraph","chartLink","absoluteGrowthList","line","relativeGrowthList","Card","message","footnote","widthSmall","widthLarge","sm","md","depositContext","CURRENT_YEAR","GROWTH","dataNew","dataOld","total","absoluteGrowth","relativeGrowth","typeCounts","delta","forEach","dNew","index","factor","parseFloat","a","b","citationGrowth","Copyright","align","Link","author","Date","getFullYear","src","alt","Dashboard","useState","open","setOpen","CssBaseline","AppBar","clsx","Toolbar","IconButton","edge","onClick","noWrap","Drawer","Divider","List","Container","maxWidth","basename","exact","path","About","Statistics","Box","pt","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"s1rFAYeA,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,+BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,uPCEDQ,EACX,gCAOE,eAACC,EAAA,EAAD,CAAUC,QAAM,EAACC,UAAW,IAAKC,KAAM,UAAvC,UACE,cAACC,EAAA,EAAD,UACE,cAAC,IAAD,MAEF,cAACC,EAAA,EAAD,CAAcC,QAAQ,aAExB,eAACN,EAAA,EAAD,CAAUC,QAAM,EAACC,UAAW,IAAKC,KAAM,UAAvC,UACE,cAACC,EAAA,EAAD,UACE,cAAC,IAAD,MAEF,cAACC,EAAA,EAAD,CAAcC,QAAQ,kBAExB,eAACN,EAAA,EAAD,CAAUC,QAAM,EAACC,UAAW,IAAKC,KAAM,UAAvC,UACE,cAACC,EAAA,EAAD,UACE,cAAC,IAAD,MAEF,cAACC,EAAA,EAAD,CAAcC,QAAQ,gB,2CCiDbC,EA/EGC,aAAW,SAACC,GAAD,MAAY,CACvCC,KAAM,CACJC,QAAS,QAEXC,QAAS,CACPC,aAAc,IAEhBC,YAAY,aACVH,QAAS,OACTI,WAAY,SACZC,eAAgB,WAChBC,QAAS,SACNR,EAAMS,OAAON,SAElBO,OAAQ,CACNC,OAAQX,EAAMW,OAAOC,OAAS,EAC9BC,WAAYb,EAAMc,YAAYC,OAAO,CAAC,QAAS,UAAW,CACxDC,OAAQhB,EAAMc,YAAYE,OAAOC,MACjCC,SAAUlB,EAAMc,YAAYI,SAASC,iBAGzCC,YAAa,CACXC,WAvBgB,IAwBhBC,MAAM,eAAD,OAxBW,IAwBX,OACLT,WAAYb,EAAMc,YAAYC,OAAO,CAAC,QAAS,UAAW,CACxDC,OAAQhB,EAAMc,YAAYE,OAAOC,MACjCC,SAAUlB,EAAMc,YAAYI,SAASK,kBAGzCC,WAAY,CACVC,YAAa,IAEfC,iBAAkB,CAChBxB,QAAS,QAEXyB,MAAO,CACLC,SAAU,GAEZC,YAAa,CACXC,SAAU,WACVC,WAAY,SACZT,MA1CgB,IA2ChBT,WAAYb,EAAMc,YAAYC,OAAO,QAAS,CAC5CC,OAAQhB,EAAMc,YAAYE,OAAOC,MACjCC,SAAUlB,EAAMc,YAAYI,SAASK,kBAGzCS,iBAAiB,aACfC,UAAW,SACXpB,WAAYb,EAAMc,YAAYC,OAAO,QAAS,CAC5CC,OAAQhB,EAAMc,YAAYE,OAAOC,MACjCC,SAAUlB,EAAMc,YAAYI,SAASC,gBAEvCG,MAAOtB,EAAMkC,QAAQ,IACpBlC,EAAMmC,YAAYC,GAAG,MAAQ,CAC5Bd,MAAOtB,EAAMkC,QAAQ,KAGzBG,aAAcrC,EAAMS,OAAON,QAC3BmC,QAAS,CACPV,SAAU,EACVW,OAAQ,QACRC,SAAU,QAEZC,UAAW,CACTC,WAAY1C,EAAMkC,QAAQ,GAC1BS,cAAe3C,EAAMkC,QAAQ,IAE/BU,MAAO,CACLpC,QAASR,EAAMkC,QAAQ,GACvBhC,QAAS,OACTsC,SAAU,OACVK,cAAe,UAEjBC,YAAa,CACXP,OAAQ,S,oFCxEZ,SAASQ,EAAYC,GAMnB,OAAOA,EAAKC,WAAa,IAAMD,EAAKC,WAatC,IAAIC,EAAQ,GACZ,IAAK,IAAMC,MAAYC,EACrBF,EAAMG,KANCC,SAMgBH,GANDI,MAAM,KAAK,MAQnCL,EAAK,YAAO,IAAIM,IAAIN,KACdO,OAEN,IAAIC,GAAQ,GACZ,IAAK,IAAMC,MAAYC,EACrBF,GAAML,KAAKM,IAGb,SAASE,GAAQb,GAIf,IAAIc,EAAYf,EAAYC,GACxBe,EAAiBX,EAAUU,GAAV,UACjBE,EAAOJ,EAEX,IAAK,IAAMD,KAAYK,EACrBA,EAAKL,GAAL,UAA8BI,EAAeJ,GAAf,UAGhC,IAAIM,EAAY,GAChB,IAAK,IAAMN,KAAYK,EACrBC,EAAUZ,KAAKa,OAAOC,OAAO,GAAIH,EAAKL,KAExC,OAAOM,EAcT,SAASG,GAAgBC,GAMvB,IAAIC,EAAY,GAChB,IAAK,IAAMC,KAAYX,EACrB,IAAK,IAAMY,KAAUH,EACfA,EAAQG,GAAQC,SAASb,EAAMW,GAAUC,KAC3CF,EAAUjB,KAAKkB,GAIrB,OAAOD,EAGT,SAASI,GAAiBJ,GAMxB,IANmC,EAM/BK,EAAY,GANmB,cAOhBzB,GAPgB,IAOnC,2BAA0B,CAAC,IAAhBF,EAAe,QACpBgB,EAAO,GACPF,EAAYf,EAAYC,GAE5BgB,EAAI,EAAQV,SAASN,GACrBgB,EAAI,EAAQ,EALY,oBAMDM,GANC,IAMxB,2BAAkC,CAAC,IAAxBC,EAAuB,QAChCP,EAAI,GAASV,SACXF,EAAUU,GAAV,UAAkCS,GAAlC,YARoB,+BAWpBK,MAAMZ,EAAI,IAAUA,EAAI,GAAS,KACnCA,EAAI,EAAQ,GAEdW,EAAUtB,KAAKW,IArBkB,8BAuBnC,OAAOW,E,uOCpFT,SAASE,GAAYC,EAASC,GAI5B,OACE,cAACC,GAAA,EAAD,CAASrD,MAAOmD,EAASG,UAAU,MAAoBC,OAAK,EAA5D,SACE,sBAAMC,UAAU,cAAhB,SAA+BJ,KADaD,G,ICmCnCM,G,kDApDb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXtC,KAAM,OACNgB,KAAMH,GAAQ,QACd0B,QAAS,KACTC,QAAS,CACPC,OAAO,EACPC,WAAY,WACZC,UAAW,CAAEC,KAAM,YAAaC,UAAW,QAC3CC,YAAa,IACbC,gBAAgB,IAXH,E,oDAgBnB,SAAiBC,GACfC,KAAKC,SAAS,CACZlD,KAAMgD,EAAMG,OAAOC,MACnBpC,KAAMH,GAAQmC,EAAMG,OAAOC,W,oBAI/B,WAAU,IDAQpC,EAAMhB,ECAf,OACP,OACE,qBAAKmC,UAAU,MAAf,SACE,wBAAQA,UAAU,aAAlB,SACE,cAAC,IAAD,CACExD,MACE,oDAEE,wBACE0E,aAAcJ,KAAKX,MAAMtC,KACzBsD,SAAU,SAACN,GAAD,OAAW,EAAKO,iBAAiBP,IAF7C,SAIG9C,EAAMsD,KAAI,SAACC,GAAD,OACT,iCAAiBA,GAAJA,WAKrBlB,SDlBQvB,ECkBYiC,KAAKX,MAAMtB,KDlBjBhB,ECkBuBiD,KAAKX,MAAMtC,KDX5C,CACZ,CACE4C,KAAM,OACNc,MAAO,OACPlB,QAAS,CACPhB,QAAQ,EACRf,MAAM,EAENkD,qBAAsB,SAACC,GACrB,IAAMC,EAAM7C,EAAK4C,GACjB,OACE,mBAAGlH,KAAMmH,EAAG,SAAcV,OAAO,SAASW,IAAI,aAA9C,SACGD,EAAG,UAMd,CACEjB,KAAM,QACNc,MAAO,QACPlB,QAAS,CAAEhB,QAAQ,EAAOf,MAAM,EAAMvD,SAAS,IAEjD,CACE0F,KAAM,mBACNc,MAAO,mBACPlB,QAAS,CAAEhB,QAAQ,EAAOf,MAAM,EAAMvD,SAAS,IAEjD,CACE0F,KAAM,eACNc,MAAO,eACPlB,QAAS,CAAEhB,QAAQ,EAAMf,MAAM,EAAMvD,SAAS,EAC5CyG,qBAAsB,SAACC,GACrB,IAAMG,EAAQ/C,EAAK4C,GAAL,aACd,OAAKG,EACEA,EAAMP,KAAI,SAACC,GAAD,OAAO5B,GAAYmC,GAAaP,GAAIA,MADhC,MAM3B,CACEb,KAAM,QACNc,MAAO,UACPlB,QAAS,CACPhB,QAAQ,EACRf,MAAM,EACNkD,qBAAsB,SAACC,GAErB,OADc5C,EAAK4C,GAAL,MACDJ,KAAI,SAACC,GAAD,OAAO5B,GAAYoC,GAAQR,GAAIA,SAItD,CACEb,KAAM,aACNc,MAAO,aACPlB,QAAS,CACPhB,QAAQ,EACRf,MAAM,EACNvD,SAAS,EACTyG,qBAAsB,SAACC,GAErB,OADc5C,EAAK4C,GAAL,WACDJ,KAAI,SAACC,GAAD,OAAO,mBAAG/G,KAAM,wCAAyCyG,OAAO,SAASW,IAAI,aAAtE,SAAoFL,UAKlH,CACEb,KAAM,OACNc,MAAO,OACPlB,QAAS,CACPhB,QAAQ,EACRf,MAAM,EACNkD,qBAAsB,SAACC,GAErB,OADc5C,EAAK4C,GAAL,KACDJ,KAAI,SAACC,GAAD,OAAO5B,GAAYqC,GAAKT,GAAIA,SAInD,CACEb,KAAM,UACNc,MAAO,OACPlB,QAAS,CACPhB,QAAQ,EACRf,MAAM,EACNkD,qBAAsB,SAACC,GACrB,IAAMH,EAAIzC,EAAK4C,GAAL,QACV,MAAI,CAAC,OAAQ,QAAQnC,SAASgC,GACrB5B,GAAYsC,GAASV,GAAI,cAAC,KAAD,KACvB,CAAC,QAAQhC,SAASgC,GACpB5B,GACLsC,GAASV,GACT,iCACE,cAAC,KAAD,IACA,cAAC,KAAD,QAGK,CAAC,KAAKhC,SAASgC,GACjB5B,GAAYsC,GAASV,GAAI,cAAC,KAAD,KAEzB5B,GAAYsC,GAASV,GAAI,cAAC,KAAD,QAMxC,CACEb,KAAM,UACNc,MAAO,SACPlB,QAAS,CACPhB,QAAQ,EACRf,MAAM,EACNkD,qBAAsB,SAACC,GACrB,IAAMH,EAAIzC,EAAK4C,GAAL,QACV,MAAI,CAAC,OAAQ,QAAQnC,SAASgC,GACrB5B,GAAYsC,GAASV,GAAI,cAAC,KAAD,CAAcW,MAAO,YAC5C,CAAC,QAAQ3C,SAASgC,GACpB5B,GAAYsC,GAASV,GAAI,cAAC,KAAD,CAAUW,MAAO,YACxC,CAAC,QAAS,UAAU3C,SAASgC,GAC/B5B,GACLsC,GAASV,GACT,cAAC,KAAD,CAAkBW,MAAO,YAElB,CAAC,KAAK3C,SAASgC,GACjB5B,GACLsC,GAASV,GACT,+BACE,cAAC,KAAD,CAAkBW,MAAO,cAItBvC,GAAYsC,GAASV,GAAIA,MAKxC,CACEb,KAAM,qBACNc,MAAO,eACPlB,QAAS,CAAEhB,QAAQ,EAAOf,MAAM,EAAMvD,SAAS,IAGjD,CACE0F,KAAM,YACNc,MAAO,YACPlB,QAAS,CACPhB,QAAQ,EACRf,MAAM,EAENkD,qBAAsB,SAACC,GACrB,IAAMC,EAAM7C,EAAK4C,GACbS,EAAY,GAYhB,OATEA,EAD0B,gBAAxBR,EAAG,aAEH,4CACAA,EAAG,qBAAyB5D,WAG5B,wCACAqE,mBAAmBT,EAAG,cAE1BQ,GAAa,8BAAgCrE,EAAO,WAAaA,EAE/D,mBAAGtD,KAAM2H,EAAWlB,OAAO,SAASW,IAAI,aAAxC,SACGD,EAAG,eAMd,CACEjB,KAAM,QACNc,MAAO,QACPlB,QAAS,CACPhB,QAAQ,EACRf,MAAM,EAENkD,qBAAsB,SAACC,GACrB,IAAMC,EAAM7C,EAAK4C,GACjB,OACE,eAACW,GAAA,EAAD,CACE7H,KAAM,YAAc4H,mBAAmBT,EAAG,MAC1CO,MAAM,YAFR,UAIE,cAAC,KAAD,IAAkB,YC5KpBpD,KAAMiC,KAAKX,MAAMtB,KACjBwB,QAASS,KAAKX,MAAME,kB,GA5CZgC,IAAMC,W,yCCNX,SAASC,GAAMrC,GAC5B,OACE,cAACsC,EAAA,EAAD,CAAYlI,UAAU,KAAKmI,QAAQ,KAAKR,MAAM,UAAUS,cAAY,EAApE,SACGxC,EAAMyC,W,cCPE,OAA0B,iCCsBnCC,G,kDAUJ,WAAY1C,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACX3D,MAAO0D,EAAM1D,MACbqG,aAAc3C,EAAM2C,aACpBC,SAAU5C,EAAM4C,UAAY,GAC5BC,QAAS7C,EAAM6C,SANA,E,sDAUnB,WAAsB,IAAD,QAEfjC,KAAKX,MAAM2C,UAAYhC,KAAKX,MAAM0C,cACtCG,MAAMlC,KAAKX,MAAM0C,cAAchJ,MAAK,SAAAoJ,GAAG,OAAIA,EAAIrD,UAAQ/F,MAAK,SAAA+F,GAAI,OAAI,EAAKmB,SAAS,CAAE+B,UAjC1DI,EAiCiFtD,EAjCjEuD,EAiCsE,CAAC,YAAeC,IA1BzH,IAAIxJ,SAAS,WAAWsJ,EAAgB,MAAMG,KAAKF,MAPzC,IAASD,EAAgBC,O,oBAqC5C,WACE,OAAY,cAACG,GAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,GAAf,SACZ,cAACC,GAAA,EAAD,CAAOzD,UAAWc,KAAKX,MAAM4C,QAAQtF,MAArC,SACE,eAAC,IAAMiG,SAAP,WACE,cAACnB,GAAD,UAAQzB,KAAKX,MAAM3D,QACnB,cAACgG,EAAA,EAAD,CAAYlI,UAAU,MAAMmI,QAAQ,QAAQzC,UAAU,WAAtD,SACE,cAAC,KAAD,CAAe2D,OAAQ7C,KAAKX,MAAM2C,wB,GAjCjBT,IAAMC,WA0ClB,SAASsB,KACtB,IAAMb,EAAUpI,IAChB,OACE,cAAC2I,GAAA,EAAD,CAAMhG,WAAS,EAACP,QAAS,EAAzB,SACE,cAAC,GAAD,CAAcP,MAAM,QAAQqG,aAAcgB,GAASd,QAASA,M,cCzD5De,GAAQ,CACZC,KAAM,CACJC,OAAO,CACLpE,KAAM,CACJqE,SAAU,WAyClB,SAASC,KAOP,IAAI9E,EAAW+E,mBAAmBC,cAAS,MACrCnG,EAAYsB,GAAiB,CAACH,IAC9B5C,EA3CR,SAAkB4C,EAAUnB,GAI1B,IAJqC,EAIjCoG,EAAmB,GACnBC,EAAY,EALqB,cAQjBrG,EAAUsG,QAAQC,WARD,IAQrC,2BAAiD,CAAC,IAAvCC,EAAsC,QAC/C,GAAIA,EAAK,EAHU,GAIjB,MAEFJ,EAAiBnG,KAAKuG,EAAK,GAC3BH,EAAYG,EAAK,GAbkB,8BAiBrC,GAAIJ,EAAiBK,OAAS,EAC5B,OAAOtF,EAGT,IAAMuF,EAAQN,EAAiB,GAAKA,EAAiBE,OAAO,GAAG,GAU/D,OANEnF,EACA,KAH6D,KAA5DwF,KAAKC,IAAIF,EAAO,GAAON,EAAiBK,OAAS,IAAM,IAI3CI,QAAQ,GACrB,mCACAR,EAcYS,CAAS3F,EAAUnB,GAC3B8E,EAAUpI,IAEVkE,EAAO,CAAEmG,GAAI5F,EAAUP,KAAMZ,GAEnC,OACE,cAACwF,GAAA,EAAD,CAAOzD,UAAW+C,EAAQtF,MAA1B,SACGwH,GAAU,CAACpG,GAAOrC,GAAO,KAKhC,SAASyI,GAAUpG,EAAMrC,GAAqB,IAAdwH,IAAa,yDAIvCkB,EAAc,GACdC,EAAe,GAgCnB,OA/BInB,IACFkB,EAAY,CACV,CACEE,OAAQ,eACR1E,UAAW,SACX2E,SAAS,EACTC,WAAY,IACZC,WAAY,EACZC,aAAc,EACdC,cAAe,gBACfC,UAAW,GACXC,WAAY,GACZC,YAAa,IACbC,WAAY,GACZC,YAAa,SACbC,kBAAmB,oBACnBC,QAAS,CACP,CACEC,GAAI,QACJC,MAAO,CACLC,eAAgB,qBAChBP,YAAa,OAMvBT,EAAe,KAKf,eAAC,IAAMzB,SAAP,WACI,cAACnB,GAAD,UAAQ/F,IACR,qBAAKwD,UAAU,QAAf,SACA,cAAC,KAAD,CACExD,MAAOA,EACPqC,KAAMA,EACNuH,OAAQ,CAAEC,IAAK,GAAIC,MAAOnB,EAAcoB,OAAQ,GAAIC,KAAM,IAC1DC,OAAQ,CAAEC,KAAM,SAChBC,OAAQ,CACND,KAAM,SACNE,IAAK,EACLC,IAAK,OACLC,SAAS,EACTtC,SAAS,GAEXuC,QAAS,KACTC,UAAW,KACXC,WAAY,CACVC,OAAQ,SACRlD,OAAQ,OACRmD,aAAc,GACdC,eAAgB,UAElBC,SAAU,CACRH,OAAQ,OACRlD,OAAQ,sCACRmD,cAAe,GACfC,eAAgB,UAElBE,UAAW,GACXC,WAAY,CAAE1M,MAAO,cACrB2M,iBAAkB,EAClBC,iBAAkB,CAAEC,KAAM,cAC1BC,mBAAoB,GACpBC,iBAAiB,EACjBC,SAAS,EACTC,QAAS5C,EACT6C,SAAS,EACTlN,MAAOiJ,UC5EjB,SAASkE,KAMP,IAAIC,EAAS,CACX,iBAAkB,CAAC,IAAK,SAAU,SAClC,kBAAmB,CAAE,QACrB,aAAc,CAAC,IAAK,OAAQ,SAAU,SACtCC,WAAY,CAAC,OAAQ,SAGnBC,EAAQ,GACZ,IAAK,IAAMC,KAASH,EAAQ,CAC1B,IAAM9I,EAAYF,GAAgB,CAAEoJ,QAASJ,EAAOG,KACpDD,EAAMjK,KAAK,CAAE8G,GAAIoD,EAAOvJ,KAAMU,GAAiBJ,KAEjD,OAAO8F,GAAUkD,EAAO,IAG1B,SAASG,KAMP,IAAIL,EAAS,CACX,gBAAiB,CAAC,QAClB,cAAe,CAAC,SAAU,SAC1B,mBAAoB,CAAC,OAAQ,IAAK,OAAQ,SAAU,UAGlDE,EAAQ,GACZ,IAAK,IAAMC,KAASH,EAAQ,CAC1B,IAAM9I,EAAYF,GAAgB,CAAEoJ,QAASJ,EAAOG,KACpDD,EAAMjK,KAAK,CAAE8G,GAAIoD,EAAOvJ,KAAMU,GAAiBJ,KAEjD,OAAO8F,GAAUkD,EAAO,IAG1B,SAASI,GAAUnJ,GAIjB,OAAO,mBAAG7E,KAAM,YAAc4H,mBAAmB/C,GAA1C,SAAsDA,IAkB/D,SAASoJ,GAAmB3J,GAC1B,OACE,cAAC2D,EAAA,EAAD,CAAYlI,UAAU,MAAMmI,QAAQ,YAApC,SACE,6BACG5D,EAAKwC,KAAI,SAACoH,GAAD,OACR,+BACGF,GAAUE,EAAK,IACf,MAAQA,EAAK,GAAK,eAQ/B,SAASC,GAAmB7J,GAC1B,OACE,cAAC2D,EAAA,EAAD,CAAYlI,UAAU,MAAMmI,QAAQ,YAApC,SACE,6BACG5D,EAAKwC,KAAI,SAACoH,GAAD,OACR,+BACGF,GAAUE,EAAK,IACf,MAAQtK,SAAmB,IAAVsK,EAAK,IAAY,gBAkB/C,SAASE,GAAKnM,EAAOoM,GAAuD,IAA9CC,EAA6C,uDAAlC,GAAIC,EAA8B,uCAAlBC,EAAkB,uDAAN,KAU7DhG,EAAUpI,IAIhB,OAHMmO,IACJA,EAAaC,GAER,CACL,cAACzF,GAAA,EAAD,CAAMC,MAAI,EAACyF,GAAIF,EAAYG,GAAIF,EAA/B,SACE,cAACtF,GAAA,EAAD,CAAOzD,UAAW+C,EAAQtF,MAA1B,SACE,eAAC,IAAMiG,SAAP,WACE,cAACnB,GAAD,UAAQ/F,IACPoM,EACD,cAACpG,EAAA,EAAD,CAAYP,MAAM,gBAAgBjC,UAAW+C,EAAQmG,eAArD,SACGL,YAQb,IAAIM,GAAepL,EAAMwG,OAAO,GAAG,GAC/B6E,GAjMJ,SAAwBvL,GAKtB,IAAMwL,EAAU3K,GAAQb,GAClByL,EAAU5K,GAAQb,EAAO,GAE3BgB,EAAO,CACT0K,MAAO,GACPC,eAAgB,GAChBC,eAAgB,GAChBC,WAAY,IAEVC,EAAQ,EACRvK,EAAW,GA0Cf,OAxCAiK,EAAQO,SAAQ,SAACC,EAAMC,GAMrB,GALA1K,EAAWyK,EAAI,KACfF,EAAQE,EAAI,UAAgBP,EAAQQ,GAAR,UAC5BjL,EAAI,eAAmBX,KAAK,CAACkB,EAAUuK,IACvC9K,EAAI,MAAUX,KAAK,CAACkB,EAAUyK,EAAI,YAE9BR,EAAQS,GAAR,UPpCO,IOsCTjL,EAAI,eAAmBX,KAAK,CAACkB,EAAU,QAClC,CACL,IAAM2K,EAASJ,EAAQK,WAAWV,EAAQQ,GAAR,WAClCjL,EAAI,eAAmBX,KAAK,CAACkB,EAAU2K,IAXV,oBAeZF,EAAI,OAfQ,IAe/B,2BAAkC,CAAC,IAAxBnD,EAAuB,QAC5BA,KAAQ7H,EAAI,WACdA,EAAI,WAAe6H,IAAS,EAE5B7H,EAAI,WAAe6H,GAAQ,GAnBA,kCAwBjC7H,EAAI,eACDP,MAAK,SAAC2L,EAAGC,GACR,OAAOD,EAAE,GAAKC,EAAE,MAEjB1F,UACH3F,EAAI,eACDP,MAAK,SAAC2L,EAAGC,GACR,OAAOD,EAAE,GAAKC,EAAE,MAEjB1F,UACH3F,EAAI,MACDP,MAAK,SAAC2L,EAAGC,GACR,OAAOD,EAAE,GAAKC,EAAE,MAEjB1F,UAEI3F,EAwIIsL,CAAehB,IAEb,SAASvF,KAEtB,OACE,eAACN,GAAA,EAAD,CAAMhG,WAAS,EAACP,QAAS,EAAzB,UACG4L,GACC,mBAAqBQ,IA5FVtK,EA6FDuK,GAAM,MAAU7E,MAAM,EAAG,IA3FvC,cAAC/B,EAAA,EAAD,CAAYlI,UAAU,MAAMmI,QAAQ,YAApC,SACE,6BACG5D,EAAKwC,KAAI,SAACoH,GAAD,OACR,+BACGF,GAAUE,EAAK,IACf,KAAOA,EAAK,GAAK,gBAuFtB,GACA,GAAI,GAELE,GACC,wBAA0BQ,GAC1BX,GAAmBY,GAAM,eAAmB7E,MAAM,EAAG,KACrD,oBAAsB4E,GAAe,GAAK,IAC1C,GAAG,GAEJR,GACC,iCAAmCQ,GACnCT,GAAmBU,GAAM,eAAmB7E,MAAM,EAAG,KACrD,oBAAsB4E,GAAe,GAAK,IAC1C,GAAG,GAEJR,GACC,+BACAX,KACA,GACA,IAEDW,GACC,wCACAL,KACA,4LAEA,OAxHR,IAAmBzJ,ECnGnB,SAASuL,KACP,OACE,eAAC5H,EAAA,EAAD,CAAYC,QAAQ,QAAQR,MAAM,gBAAgBoI,MAAM,SAAxD,UACG,kBACD,cAACC,EAAA,EAAD,CACErI,MAAM,UACN1H,KAAK,0CACLyG,OAAO,SAHT,SAKGoC,GAAYmH,OAAO9J,OACd,KACP,IAAI+J,MAAOC,cACX,KACD,cAACH,EAAA,EAAD,CACE/P,KAAK,+DACLyG,OAAO,SAFT,uBAMA,cAACsJ,EAAA,EAAD,CAAM/P,KAAK,+CAAX,SACE,qBACEyF,UAAU,SACV0K,IAAI,yCACJC,IAAI,aAOC,SAASC,KACtB,IAAM7H,EAAUpI,IAChB,EAAwB0H,IAAMwI,UAAS,GAAvC,mBAAOC,EAAP,KAAaC,EAAb,KAQA,OACE,sBAAK/K,UAAW+C,EAAQjI,KAAxB,UACE,cAACkQ,EAAA,EAAD,IACA,cAACC,EAAA,EAAD,CACEtO,SAAS,WACTqD,UAAWkL,kBAAKnI,EAAQxH,OAAQuP,GAAQ/H,EAAQ9G,aAFlD,SAIE,eAACkP,EAAA,EAAD,CAASnL,UAAW+C,EAAQ/H,QAA5B,UACE,cAACoQ,EAAA,EAAD,CACEC,KAAK,QACLpJ,MAAM,UACN,aAAW,cACXqJ,QAnBe,WACvBP,GAAQ,IAmBA/K,UAAWkL,kBACTnI,EAAQ1G,WACRyO,GAAQ/H,EAAQxG,kBAPpB,SAUE,cAAC,IAAD,MAEF,cAACiG,EAAA,EAAD,CACElI,UAAU,KACVmI,QAAQ,KACRR,MAAM,UACNsJ,QAAM,EACNvL,UAAW+C,EAAQvG,MALrB,yDAkBJ,eAACgP,EAAA,EAAD,CACE/I,QAAQ,YACRM,QAAS,CACPtF,MAAOyN,kBAAKnI,EAAQrG,aAAcoO,GAAQ/H,EAAQlG,mBAEpDiO,KAAMA,EALR,UAOE,qBAAK9K,UAAW+C,EAAQ7H,YAAxB,SACE,cAACkQ,EAAA,EAAD,CAAYE,QAlDM,WACxBP,GAAQ,IAiDF,SACE,cAAC,IAAD,QAGJ,cAACU,EAAA,EAAD,IACA,cAACC,EAAA,EAAD,UAAOvR,OAIT,uBAAM6F,UAAW+C,EAAQ5F,QAAzB,UACE,qBAAK6C,UAAW+C,EAAQ7F,eACxB,eAACyO,EAAA,EAAD,CAAWC,SAAS,KAAK5L,UAAW+C,EAAQzF,UAA5C,UACE,eAAC,IAAD,CAAQuO,SAAS,IAAjB,UAEE,cAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIzR,UAAW2F,KACjC,cAAC,IAAD,CAAO6L,OAAK,EAACC,KAAK,SAASzR,UAAW2F,KACtC,cAAC,IAAD,CAAO6L,OAAK,EAACC,KAAK,gBAAgBzR,UAAW4J,KAC7C,cAAC,IAAD,CAAO4H,OAAK,EAACC,KAAK,SAASzR,UAAW0R,KACtC,cAAC,IAAD,CAAOF,OAAK,EAACC,KAAK,SAASzR,UAAW2R,QAGxC,cAACC,EAAA,EAAD,CAAKC,GAAI,EAAT,SACE,cAAC/B,GAAD,e,OChIZgC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC1B,GAAD,MAEF2B,SAASC,eAAe,SAM1B9S,M","file":"static/js/main.d8223613.chunk.js","sourcesContent":["const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport InfoIcon from \"@material-ui/icons/Info\";\n// import HomeIcon from '@material-ui/icons/Home';\nimport EqualizerIcon from \"@material-ui/icons/Equalizer\";\nimport TableChartIcon from \"@material-ui/icons/TableChart\";\n\nexport const mainListItems = (\n  <div>\n    {/* {      <ListItem button component={\"a\"} href={'#/'}>\n      <ListItemIcon>\n        <HomeIcon />\n      </ListItemIcon>\n      <ListItemText primary=\"Home\" />\n    </ListItem>} */}\n    <ListItem button component={\"a\"} href={\"#/table\"}>\n      <ListItemIcon>\n        <TableChartIcon />\n      </ListItemIcon>\n      <ListItemText primary=\"Table\" />\n    </ListItem>\n    <ListItem button component={\"a\"} href={\"#/stats\"}>\n      <ListItemIcon>\n        <EqualizerIcon />\n      </ListItemIcon>\n      <ListItemText primary=\"Statistics\" />\n    </ListItem>\n    <ListItem button component={\"a\"} href={\"#/about\"}>\n      <ListItemIcon>\n        <InfoIcon />\n      </ListItemIcon>\n      <ListItemText primary=\"About\" />\n    </ListItem>\n  </div>\n);\n\n// export const secondaryListItems = (\n//   <div>\n//     <ListSubheader inset>Saved reports</ListSubheader>\n//     <ListItem button>\n//       <ListItemIcon>\n//         <AssignmentIcon />\n//       </ListItemIcon>\n//       <ListItemText primary=\"Current month\" />\n//     </ListItem>\n//     <ListItem button>\n//       <ListItemIcon>\n//         <AssignmentIcon />\n//       </ListItemIcon>\n//       <ListItemText primary=\"Last quarter\" />\n//     </ListItem>\n//     <ListItem button>\n//       <ListItemIcon>\n//         <AssignmentIcon />\n//       </ListItemIcon>\n//       <ListItemText primary=\"Year-end sale\" />\n//     </ListItem>\n//   </div>\n// );\n","import { makeStyles } from \"@material-ui/core/styles\";\n\nconst drawerWidth = 240;\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: \"flex\",\n  },\n  toolbar: {\n    paddingRight: 24, // keep right padding when drawer closed\n  },\n  toolbarIcon: {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"flex-end\",\n    padding: \"0 8px\",\n    ...theme.mixins.toolbar,\n  },\n  appBar: {\n    zIndex: theme.zIndex.drawer + 1,\n    transition: theme.transitions.create([\"width\", \"margin\"], {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen,\n    }),\n  },\n  appBarShift: {\n    marginLeft: drawerWidth,\n    width: `calc(100% - ${drawerWidth}px)`,\n    transition: theme.transitions.create([\"width\", \"margin\"], {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.enteringScreen,\n    }),\n  },\n  menuButton: {\n    marginRight: 36,\n  },\n  menuButtonHidden: {\n    display: \"none\",\n  },\n  title: {\n    flexGrow: 1,\n  },\n  drawerPaper: {\n    position: \"relative\",\n    whiteSpace: \"nowrap\",\n    width: drawerWidth,\n    transition: theme.transitions.create(\"width\", {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.enteringScreen,\n    }),\n  },\n  drawerPaperClose: {\n    overflowX: \"hidden\",\n    transition: theme.transitions.create(\"width\", {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen,\n    }),\n    width: theme.spacing(7),\n    [theme.breakpoints.up(\"sm\")]: {\n      width: theme.spacing(9),\n    },\n  },\n  appBarSpacer: theme.mixins.toolbar,\n  content: {\n    flexGrow: 1,\n    height: \"100vh\",\n    overflow: \"auto\",\n  },\n  container: {\n    paddingTop: theme.spacing(4),\n    paddingBottom: theme.spacing(4),\n  },\n  paper: {\n    padding: theme.spacing(2),\n    display: \"flex\",\n    overflow: \"auto\",\n    flexDirection: \"column\",\n  },\n  fixedHeight: {\n    height: 240,\n  },\n}));\n\nexport default useStyles;\n","import citations from \"../data/citations.json\";\nimport codes from \"../data/codes.json\";\n\n// Citation cutoff\nconst CUTOFF = 100;\n\nfunction yearToRange(year) {\n  /**\n   * Transform year to year range used in citations.json\n   *\n   * E.g. 2020 => \"2020-2020\"\n   */\n  return year.toString() + \"-\" + year.toString();\n}\n\nfunction rangeToYear(range) {\n  /**\n   * Transform year range used in citations.json to year\n   *\n   * E.g. \"2020-2020\" => 2020\n   */\n  return parseInt(range.split(\"-\")[0]);\n}\n\n// For whatever reason, one cannot simply use `citations.keys()`\nlet YEARS = [];\nfor (const citation in citations) {\n  YEARS.push(rangeToYear(citation));\n}\nYEARS = [...new Set(YEARS)];\nYEARS.sort();\n\nlet CODES = [];\nfor (const codename in codes) {\n  CODES.push(codename);\n}\n\nfunction getData(year) {\n  /**\n   * Get data for code table for a given year.\n   */\n  let range_key = yearToRange(year);\n  let citations_data = citations[range_key][\"citations\"];\n  let data = codes; //.slice();\n\n  for (const codename in data) {\n    data[codename][\"citations\"] = citations_data[codename][\"citations\"];\n  }\n\n  let dataArray = [];\n  for (const codename in data) {\n    dataArray.push(Object.assign({}, data[codename]));\n  }\n  return dataArray;\n}\n\nfunction getDataChart() {\n  /**\n   * Get citation data for all codes\n   */\n  let lines = [];\n  for (const codeName of CODES.slice(0, 50)) {\n    lines.push({ id: codeName, data: getCodeCitations(codeName) });\n  }\n  return lines;\n}\n\nfunction filterCodeNames(filters) {\n  /**\n   * Return list of code names after applying filters.\n   *\n   * E.g. filters = {'type': ['DFT']}\n   */\n  let codeNames = [];\n  for (const codeName in codes) {\n    for (const filter in filters) {\n      if (filters[filter].includes(codes[codeName][filter])) {\n        codeNames.push(codeName);\n      }\n    }\n  }\n  return codeNames;\n}\n\nfunction getCodeCitations(codeNames) {\n  /**\n   * Return citations of requested codes vs years.\n   *\n   * Sums citations of all codes in codeNames.\n   */\n  let line_data = [];\n  for (const year of YEARS) {\n    let data = {};\n    let range_key = yearToRange(year);\n\n    data[\"x\"] = parseInt(year);\n    data[\"y\"] = 0;\n    for (const codeName of codeNames) {\n      data[\"y\"] += parseInt(\n        citations[range_key][\"citations\"][codeName][\"citations\"]\n      );\n    }\n    if (isNaN(data[\"y\"]) || data[\"y\"] <= 0) {\n      data[\"y\"] = 0;\n    }\n    line_data.push(data);\n  }\n  return line_data;\n}\n\nexport {\n  yearToRange,\n  rangeToYear,\n  YEARS,\n  CODES,\n  getData,\n  getDataChart,\n  getCodeCitations,\n  filterCodeNames,\n  CUTOFF,\n};\n","/**\n * Column definition for table\n */\nimport Tooltip from \"@material-ui/core/Tooltip\";\nimport Button from \"@material-ui/core/Button\";\nimport methods from \"../data/methods\";\nimport tags from \"../data/abbreviations\";\nimport acceleration from \"../data/acceleration\";\nimport licenses from \"../data/licenses\";\n//idea: use search icon for link to google scholar\nimport ShowChartIcon from \"@material-ui/icons/ShowChart\";\n\nimport MoneyOffIcon from \"@material-ui/icons/MoneyOff\";\nimport AttachMoneyIcon from \"@material-ui/icons/AttachMoney\";\nimport SchoolIcon from \"@material-ui/icons/School\";\nimport LockOpenIcon from \"@material-ui/icons/LockOpen\";\n\n//import NotInterestedIcon from '@material-ui/icons/NotInterested';\nimport ContactMailIcon from \"@material-ui/icons/ContactMail\";\n//import CopyrightIcon from '@material-ui/icons/Copyright';\nimport LockIcon from \"@material-ui/icons/Lock\";\nimport NoEncryptionIcon from \"@material-ui/icons/NoEncryption\";\n\nfunction TooltipText(tooltip, text) {\n  /**\n   * Tooltip with nicely spaced text that doesn't become a cursor.\n   */\n  return (\n    <Tooltip title={tooltip} placement=\"top\" key={tooltip} arrow >\n      <span className=\"has-tooltip\">{text}</span>\n    </Tooltip>\n  );\n}\n\nfunction getColumns(data, year) {\n  /**\n   * Prepare columns.\n   *\n   * Since 'customBodyRenderLite' function requires us to fetch the data ourselves, this getColumns function\n   * relies on data to already be present (which is rather bad design).\n   */\n  let columns = [\n    {\n      name: \"name\",\n      label: \"Code\",\n      options: {\n        filter: false,\n        sort: true,\n        // add homepage link to code\n        customBodyRenderLite: (dataIndex) => {\n          const row = data[dataIndex];\n          return (\n            <a href={row[\"homepage\"]} target=\"_blank\" rel=\"noreferrer\">\n              {row[\"name\"]}\n            </a>\n          );\n        },\n      },\n    },\n    {\n      name: \"notes\",\n      label: \"Notes\",\n      options: { filter: false, sort: true, display: false },\n    },\n    {\n      name: \"element_coverage\",\n      label: \"Element coverage\",\n      options: { filter: false, sort: true, display: false },\n    },\n    {\n      name: \"acceleration\",\n      label: \"Acceleration\",\n      options: { filter: true, sort: true, display: false,\n        customBodyRenderLite: (dataIndex) => {\n          const types = data[dataIndex][\"acceleration\"];\n          if (!types) { return \"\"; } else {\n          return types.map((x) => TooltipText(acceleration[x], x)); \n        }\n        },\n       },\n    },\n    {\n      name: \"types\",\n      label: \"Methods\",\n      options: {\n        filter: true,\n        sort: true,\n        customBodyRenderLite: (dataIndex) => {\n          const types = data[dataIndex][\"types\"];\n          return types.map((x) => TooltipText(methods[x], x));\n        },\n      },\n    },\n    {\n      name: \"benchmarks\",\n      label: \"Benchmarks\",\n      options: {\n        filter: true,\n        sort: true,\n        display: false,\n        customBodyRenderLite: (dataIndex) => {\n          const types = data[dataIndex][\"benchmarks\"];\n          return types.map((x) => <a href={'https://molmod.ugent.be/deltacodesdft'} target=\"_blank\" rel=\"noreferrer\">{x}</a>);\n        },\n      },\n\n    },\n    {\n      name: \"tags\",\n      label: \"Tags\",\n      options: {\n        filter: true,\n        sort: true,\n        customBodyRenderLite: (dataIndex) => {\n          const types = data[dataIndex][\"tags\"];\n          return types.map((x) => TooltipText(tags[x], x));\n        },\n      },\n    },\n    {\n      name: \"license\",\n      label: \"Cost\",\n      options: {\n        filter: true,\n        sort: true,\n        customBodyRenderLite: (dataIndex) => {\n          const x = data[dataIndex][\"license\"];\n          if ([\"C(S)\", \"C(C)\"].includes(x)) {\n            return TooltipText(licenses[x], <AttachMoneyIcon />);\n          } else if ([\"F(A)\"].includes(x)) {\n            return TooltipText(\n              licenses[x],\n              <span>\n                <MoneyOffIcon />\n                <SchoolIcon />\n              </span>\n            );\n          } else if ([\"I\"].includes(x)) {\n            return TooltipText(licenses[x], <ContactMailIcon />);\n          } else {\n            return TooltipText(licenses[x], <MoneyOffIcon />);\n          }\n          //return TooltipText(licenses[x], x);  import ContactMailIcon from '@material-ui/icons/ContactMail';\n        },\n      },\n    },\n    {\n      name: \"license\",\n      label: \"Source\",\n      options: {\n        filter: false,\n        sort: true,\n        customBodyRenderLite: (dataIndex) => {\n          const x = data[dataIndex][\"license\"];\n          if ([\"C(S)\", \"F(A)\"].includes(x)) {\n            return TooltipText(licenses[x], <LockOpenIcon color={\"action\"} />);\n          } else if ([\"C(C)\"].includes(x)) {\n            return TooltipText(licenses[x], <LockIcon color={\"action\"} />);\n          } else if ([\"OS(P)\", \"OS(CL)\"].includes(x)) {\n            return TooltipText(\n              licenses[x],\n              <NoEncryptionIcon color={\"action\"} />\n            );\n          } else if ([\"F\"].includes(x)) {\n            return TooltipText(\n              licenses[x],\n              <span>\n                <NoEncryptionIcon color={\"action\"} />\n              </span>\n            );\n          } else {\n            return TooltipText(licenses[x], x);\n          }\n        },\n      },\n    },\n    {\n      name: \"license_annotation\",\n      label: \"License Note\",\n      options: { filter: false, sort: true, display: false },\n    },\n\n    {\n      name: \"citations\",\n      label: \"Citations\",\n      options: {\n        filter: false,\n        sort: true,\n        // add google scholar link to number of citations\n        customBodyRenderLite: (dataIndex) => {\n          const row = data[dataIndex];\n          let searchUrl = \"\";\n\n          if (row[\"query_method\"] === \"publication\") {\n            searchUrl =\n              \"https://scholar.google.com/scholar?cites=\" +\n              row[\"query_publication_id\"].toString();\n          } else {\n            searchUrl =\n              \"https://scholar.google.com/scholar?q=\" +\n              encodeURIComponent(row[\"query_string\"]);\n          }\n          searchUrl += \"&hl=en&as_sdt=0%2C5&as_ylo=\" + year + \"&as_yhi=\" + year;\n          return (\n            <a href={searchUrl} target=\"_blank\" rel=\"noreferrer\">\n              {row[\"citations\"]}\n            </a>\n          );\n        },\n      },\n    },\n    {\n      name: \"trend\",\n      label: \"Trend\",\n      options: {\n        filter: false,\n        sort: true,\n        // add google scholar link to number of citations\n        customBodyRenderLite: (dataIndex) => {\n          const row = data[dataIndex];\n          return (\n            <Button\n              href={\"#/charts/\" + encodeURIComponent(row[\"name\"])}\n              color=\"secondary\"\n            >\n              <ShowChartIcon />{\" \"}\n            </Button>\n          );\n        },\n      },\n    },\n  ];\n\n  return columns;\n}\n\nexport { getColumns };\n","/**\n * Overview table with all codes.\n */\nimport React from \"react\";\nimport MUIDataTable from \"mui-datatables\";\n//import RangeSlider from './RangeSlider'\n\nimport { YEARS, getData } from \"./Config\";\nimport { getColumns } from \"./Columns\";\n\nclass Table extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      year: \"2020\",\n      data: getData(\"2020\"),\n      columns: null,\n      options: {\n        print: false,\n        filterType: \"checkbox\",\n        sortOrder: { name: \"citations\", direction: \"desc\" },\n        rowsPerPage: 100,\n        selectableRows: false,\n      },\n    };\n  }\n\n  handleYearChange(event) {\n    this.setState({\n      year: event.target.value,\n      data: getData(event.target.value),\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <MUIDataTable\n            title={\n              <h2>\n                Citation Data &nbsp;\n                <select\n                  defaultValue={this.state.year}\n                  onChange={(event) => this.handleYearChange(event)}\n                >\n                  {YEARS.map((x) => (\n                    <option key={x}>{x}</option>\n                  ))}\n                </select>\n              </h2>\n            }\n            columns={getColumns(this.state.data, this.state.year)}\n            data={this.state.data}\n            options={this.state.options}\n          />\n        </header>\n      </div>\n    );\n    //title={<RangeSlider year={this.state.year} />\n  }\n}\n\nexport default Table;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport Typography from \"@material-ui/core/Typography\";\n\nexport default function Title(props) {\n  return (\n    <Typography component=\"h2\" variant=\"h6\" color=\"primary\" gutterBottom>\n      {props.children}\n    </Typography>\n  );\n}\n\nTitle.propTypes = {\n  children: PropTypes.node,\n};\n","export default __webpack_public_path__ + \"static/media/about.267782f7.md\";","import React from 'react';\nimport Typography from \"@material-ui/core/Typography\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Paper from \"@material-ui/core/Paper\";\nimport ReactMarkdown from \"react-markdown\";\n\nimport useStyles from \"./Dashboard/Styles\";\nimport Title from \"./Dashboard/Title\";\nimport packageJson from \"../../package.json\";\n\nimport aboutMD from '../text/about.md';\n\nconst fillTemplate = function(templateString, templateVars){\n  /** \n   * Replace JS variables in markdown strings.\n   * \n   * See https://stackoverflow.com/a/37217166/1069467\n   */\n  // eslint-disable-next-line \n    return new Function(\"return `\"+templateString +\"`;\").call(templateVars);\n}\n\nclass MarkdownPane extends React.Component {\n  /**\n   * Pane to display markdown content from file\n   * \n   * Can be used with markdown file or markdown string:\n   * \n   *   <MarkdownPane title=\"About\" markdown={aboutMD} classes={classes} />\n       <MarkdownPane title=\"Methodology\" markdownFile={methodologyMD} classes={classes} />\n   */\n\n  constructor(props) {\n    super(props);\n    this.state = { \n      title: props.title,\n      markdownFile: props.markdownFile,\n      markdown: props.markdown || '',\n      classes: props.classes,\n    };\n  }\n\n  componentWillMount() {\n    // Get contents from Markdown file and put them in the React state, so we can reference it in render() below.\n    if(!this.state.markdown && this.state.markdownFile) {\n    fetch(this.state.markdownFile).then(res => res.text()).then(text => this.setState({ markdown: fillTemplate(text,{'packageJson': packageJson} ) }));\n    }\n  }\n\n  render() {\n    return  (   <Grid item xs={12}>\n    <Paper className={this.state.classes.paper}>\n      <React.Fragment>\n        <Title>{this.state.title}</Title>\n        <Typography component=\"div\" variant=\"body1\" className=\"markdown\">\n          <ReactMarkdown source={this.state.markdown} />\n        </Typography>\n      </React.Fragment>\n    </Paper>\n  </Grid> );\n    \n  }\n}\n\nexport default function Home() {\n  const classes = useStyles();\n  return (\n    <Grid container spacing={3}>\n      <MarkdownPane title=\"About\" markdownFile={aboutMD} classes={classes} />\n    </Grid>\n  );\n}","import React from \"react\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Title from \"../Dashboard/Title\";\nimport useStyles from \"../Dashboard/Styles\";\n\nimport { ResponsiveLine } from \"@nivo/line\";\n\n\nimport { getCodeCitations } from \"../Config\";\nimport { useParams } from \"react-router-dom\";\n\nconst THEME = {\n  axis: {\n    legend:{\n      text: {\n        fontSize: '14px',\n      }\n    }\n    \n  }\n};\n\nfunction getTitle(codeName, citations) {\n  /**\n   * Return title for chart.\n   */\n  let reverseCitations = [];\n  let yearBegin = 0;\n  const minCitations = 10;\n  // go backwards; stop when hitting 10 citations or lower\n  for (const point of citations.slice().reverse()) {\n    if (point[\"y\"] < minCitations) {\n      break;\n    }\n    reverseCitations.push(point[\"y\"]);\n    yearBegin = point[\"x\"];\n  }\n\n  // Need at least two years with > minCitations\n  if (reverseCitations.length < 2) {\n    return codeName;\n  }\n\n  const ratio = reverseCitations[0] / reverseCitations.slice(-1)[0];\n  const annualGrowth =\n    (Math.pow(ratio, 1.0 / (reverseCitations.length - 1)) - 1) * 100;\n  const title =\n    codeName +\n    \" \" +\n    annualGrowth.toFixed(1) +\n    \"% growth (year-over-year) since \" +\n    yearBegin;\n\n  return title;\n}\n\nfunction SingleChart() {\n  /**\n   * Return chart for single code.\n   *\n   * Name of code is parsed from URI.\n   */\n\n  let codeName = decodeURIComponent(useParams()[\"code\"]);\n  const citations = getCodeCitations([codeName]);\n  const title = getTitle(codeName, citations);\n  const classes = useStyles();\n\n  const data = { id: codeName, data: citations };\n\n  return (\n    <Paper className={classes.paper}>\n      {nivoChart([data], title, false)}\n    </Paper>\n  );\n}\n\nfunction nivoChart(data, title, legend=true) {\n  /**\n   * Return nivo line-chart with default formatting for given data and title.\n   */\n  let legend_list = [];\n  let margin_right = 50;\n  if (legend){\n    legend_list=[\n      {\n        anchor: \"bottom-right\",\n        direction: \"column\",\n        justify: false,\n        translateX: 100,\n        translateY: 0,\n        itemsSpacing: 0,\n        itemDirection: \"left-to-right\",\n        itemWidth: 80,\n        itemHeight: 20,\n        itemOpacity: 0.75,\n        symbolSize: 12,\n        symbolShape: \"circle\",\n        symbolBorderColor: \"rgba(0, 0, 0, .5)\",\n        effects: [\n          {\n            on: \"hover\",\n            style: {\n              itemBackground: \"rgba(0, 0, 0, .03)\",\n              itemOpacity: 1,\n            },\n          },\n        ],\n      },\n    ];\n    margin_right = 130;\n  };\n\n\n  return (\n    <React.Fragment>\n        <Title>{title}</Title>\n        <div className=\"chart\" >\n        <ResponsiveLine\n          title={title}\n          data={data}\n          margin={{ top: 20, right: margin_right, bottom: 50, left: 70 }}\n          xScale={{ type: \"point\" }}\n          yScale={{\n            type: \"linear\",\n            min: 0,\n            max: \"auto\",\n            stacked: false,\n            reverse: false,\n          }}\n          axisTop={null}\n          axisRight={null}\n          axisBottom={{\n            orient: \"bottom\",\n            legend: \"Year\",\n            legendOffset: 36,\n            legendPosition: \"middle\",\n          }}\n          axisLeft={{\n            orient: \"left\",\n            legend: \"Citations per year (Google Scholar)\",\n            legendOffset: -55,\n            legendPosition: \"middle\",\n          }}\n          pointSize={10}\n          pointColor={{ theme: \"background\" }}\n          pointBorderWidth={2}\n          pointBorderColor={{ from: \"serieColor\" }}\n          pointLabelYOffset={-12}\n          enableCrosshair={true}\n          useMesh={true}\n          legends={legend_list}\n          animate={false}\n          theme={THEME}\n        />\n        </div>\n      </React.Fragment>\n  );\n}\n\nexport { SingleChart, nivoChart };\n","import React from \"react\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Paper from \"@material-ui/core/Paper\";\n\nimport useStyles from \"./Dashboard/Styles\";\nimport Title from \"./Dashboard/Title\";\nimport {\n  CUTOFF,\n  YEARS,\n  getData,\n  filterCodeNames,\n  getCodeCitations,\n} from \"./Config\";\nimport { nivoChart } from \"./Chart/single\";\n// import { Card } from '@material-ui/core';\n\nfunction citationGrowth(year) {\n  /**\n   * Compute citation growth for given year with respect to previous one.\n   */\n\n  const dataNew = getData(year);\n  const dataOld = getData(year - 1);\n\n  let data = {\n    total: [],\n    absoluteGrowth: [],\n    relativeGrowth: [],\n    typeCounts: [],\n  };\n  let delta = 0;\n  let codeName = \"\";\n\n  dataNew.forEach((dNew, index) => {\n    codeName = dNew[\"name\"];\n    delta = dNew[\"citations\"] - dataOld[index][\"citations\"];\n    data[\"absoluteGrowth\"].push([codeName, delta]);\n    data[\"total\"].push([codeName, dNew[\"citations\"]]);\n\n    if (dataNew[index][\"citations\"] < CUTOFF) {\n      // We require at least 100 citations for analyzing growth\n      data[\"relativeGrowth\"].push([codeName, 0]);\n    } else {\n      const factor = delta / parseFloat(dataOld[index][\"citations\"]);\n      data[\"relativeGrowth\"].push([codeName, factor]);\n    }\n\n    // add code count to\n    for (const type of dNew[\"types\"]) {\n      if (type in data[\"typeCounts\"]) {\n        data[\"typeCounts\"][type] += 1;\n      } else {\n        data[\"typeCounts\"][type] = 1;\n      }\n    }\n  });\n\n  data[\"absoluteGrowth\"]\n    .sort((a, b) => {\n      return a[1] - b[1];\n    })\n    .reverse();\n  data[\"relativeGrowth\"]\n    .sort((a, b) => {\n      return a[1] - b[1];\n    })\n    .reverse();\n  data[\"total\"]\n    .sort((a, b) => {\n      return a[1] - b[1];\n    })\n    .reverse();\n\n  return data;\n}\n\nfunction costGraph() {\n  /**\n   * Citation trend by price (free/commercial).\n   */\n\n  // Careful: it seems the legend coloring does not match the one of the graph automatically\n  let groups = {\n    \"Free (general)\": [\"F\", \"OS(CL)\", \"OS(P)\"],\n    \"Free (academic)\": [ \"F(A)\"],\n    \"Free (sum)\": [\"F\", \"F(A)\", \"OS(CL)\", \"OS(P)\"],\n    Commercial: [\"C(C)\", \"C(S)\"],\n  };\n\n  let lines = [];\n  for (const group in groups) {\n    const codeNames = filterCodeNames({ license: groups[group] });\n    lines.push({ id: group, data: getCodeCitations(codeNames) });\n  }\n  return nivoChart(lines, \"\");\n}\n\nfunction sourceGraph() {\n  /**\n   * Citation trend by source code handling.\n   */\n\n  // Careful: it seems the legend coloring does not match the one of the graph automatically\n  let groups = {\n    \"Closed source\": [\"C(C)\"],\n    \"Open-source\": [\"OS(CL)\", \"OS(P)\"],\n    \"Source available\": [\"C(S)\", \"F\", \"F(A)\", \"OS(CL)\", \"OS(P)\"],\n  };\n\n  let lines = [];\n  for (const group in groups) {\n    const codeNames = filterCodeNames({ license: groups[group] });\n    lines.push({ id: group, data: getCodeCitations(codeNames) });\n  }\n  return nivoChart(lines, \"\");\n}\n\nfunction chartLink(codeName) {\n  /**\n   * Return hyperlink to citation chart for given code name.\n   */\n  return <a href={\"#/charts/\" + encodeURIComponent(codeName)}>{codeName}</a>;\n}\n\nfunction totalList(data) {\n  return (\n    <Typography component=\"div\" variant=\"subtitle1\">\n      <ol>\n        {data.map((line) => (\n          <li>\n            {chartLink(line[0])}\n            {\": \" + line[1] + \"\\n\"}\n          </li>\n        ))}\n      </ol>\n    </Typography>\n  );\n}\n\nfunction absoluteGrowthList(data) {\n  return (\n    <Typography component=\"div\" variant=\"subtitle1\">\n      <ol>\n        {data.map((line) => (\n          <li>\n            {chartLink(line[0])}\n            {\": +\" + line[1] + \"\\n\"}\n          </li>\n        ))}\n      </ol>\n    </Typography>\n  );\n}\n\nfunction relativeGrowthList(data) {\n  return (\n    <Typography component=\"div\" variant=\"subtitle1\">\n      <ol>\n        {data.map((line) => (\n          <li>\n            {chartLink(line[0])}\n            {\": +\" + parseInt(line[1] * 100) + \"%\\n\"}\n          </li>\n        ))}\n      </ol>\n    </Typography>\n  );\n}\n\n// function typeList(data) {\n//     return (\n//         <Typography component=\"div\" variant=\"subtitle1\">\n//         <ul>\n//         {Object.entries(data).map(( [k,v]) => <li>{k + \": \" + v + \"\\n\"}</li>)}\n//         </ul>\n//         </Typography>\n//     );\n// }\n\nfunction Card(title, message, footnote = \"\", widthSmall, widthLarge= null) {\n  /**\n   * Returns Grid component wrapped in Paper.\n   * \n   * @param title - Title of card\n   * @param message - Content of the card\n   * @param footnote - Display below content\n   * @param widthSmall - Width of card when viewpoint is small\n   * @param widthLarge - Width of card when viewpoint is large\n   */\n  const classes = useStyles();\n  if (! widthSmall) {\n    widthSmall = widthLarge;\n  }\n  return [\n    <Grid item sm={widthSmall} md={widthLarge}>\n      <Paper className={classes.paper}>\n        <React.Fragment>\n          <Title>{title}</Title>\n          {message}\n          <Typography color=\"textSecondary\" className={classes.depositContext}>\n            {footnote}\n          </Typography>\n        </React.Fragment>\n      </Paper>\n    </Grid>,\n  ];\n}\n\nlet CURRENT_YEAR = YEARS.slice(-1)[0];\nlet GROWTH = citationGrowth(CURRENT_YEAR);\n\nexport default function Home() {\n  // {Card(\"Simulation engines\", typeList(GROWTH['typeCounts']), \"Number of simulation engines per method.\", 4)}\n  return (\n    <Grid container spacing={3}>\n      {Card(\n        \"Highly cited in \" + CURRENT_YEAR,\n        totalList(GROWTH[\"total\"].slice(0, 10)),\n        \"\",\n        12, 4\n      )}\n      {Card(\n        \"High citation growth \" + CURRENT_YEAR,\n        absoluteGrowthList(GROWTH[\"absoluteGrowth\"].slice(0, 10)),\n        \"With respect to \" + (CURRENT_YEAR - 1) + \".\",\n        12,4\n      )}\n      {Card(\n        \"High relative citation growth \" + CURRENT_YEAR,\n        relativeGrowthList(GROWTH[\"relativeGrowth\"].slice(0, 10)),\n        \"With respect to \" + (CURRENT_YEAR - 1) + \".\",\n        12,4\n      )}\n      {Card(\n        \"Citations commercial vs free\",\n        costGraph(),\n        \"\",\n        12\n      )}\n      {Card(\n        \"Citations by source code availability\",\n        sourceGraph(),\n        \"\\\"Source available\\\" includes engines whose source code can be obtained for free or for a fee. \" +\n          \"\\\"Open-source\\\" engines are the subset of source-available engines with OSI-approved licenses.\",\n        12\n      )}\n    </Grid>\n  );\n}\n","import React from \"react\";\nimport clsx from \"clsx\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport Drawer from \"@material-ui/core/Drawer\";\nimport Box from \"@material-ui/core/Box\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport List from \"@material-ui/core/List\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Divider from \"@material-ui/core/Divider\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Container from \"@material-ui/core/Container\";\n\nimport Link from \"@material-ui/core/Link\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport ChevronLeftIcon from \"@material-ui/icons/ChevronLeft\";\nimport { mainListItems } from \"./components/Dashboard/listItems\";\n\nimport { HashRouter as Router, Route } from \"react-router-dom\";\nimport useStyles from \"./components/Dashboard/Styles\";\nimport Table from \"./components/Table\";\nimport About from \"./components/About\";\nimport Statistics from \"./components/Statistics\";\nimport { SingleChart } from \"./components/Chart/single\";\nimport packageJson from \"../package.json\";\n\nfunction Copyright() {\n  return (\n    <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\n      {\"Copyright © \"}\n      <Link\n        color=\"inherit\"\n        href=\"https://sites.google.com/site/leotalirz\"\n        target=\"_blank\"\n      >\n        {packageJson.author.name}\n      </Link>{\" \"}\n      {new Date().getFullYear()}\n      {\". \"}\n      <Link\n        href=\"https://github.com/ltalirz/atomistic-software/commits/master\"\n        target=\"_blank\"\n      >\n        Changelog\n      </Link>\n      <Link href=\"https://zenodo.org/badge/latestdoi/327603600\">\n        <img\n          className=\"zenodo\"\n          src=\"https://zenodo.org/badge/327603600.svg\"\n          alt=\"DOI\"\n        />\n      </Link>\n    </Typography>\n  );\n}\n\nexport default function Dashboard() {\n  const classes = useStyles();\n  const [open, setOpen] = React.useState(true);\n  const handleDrawerOpen = () => {\n    setOpen(true);\n  };\n  const handleDrawerClose = () => {\n    setOpen(false);\n  };\n\n  return (\n    <div className={classes.root}>\n      <CssBaseline />\n      <AppBar\n        position=\"absolute\"\n        className={clsx(classes.appBar, open && classes.appBarShift)}\n      >\n        <Toolbar className={classes.toolbar}>\n          <IconButton\n            edge=\"start\"\n            color=\"inherit\"\n            aria-label=\"open drawer\"\n            onClick={handleDrawerOpen}\n            className={clsx(\n              classes.menuButton,\n              open && classes.menuButtonHidden\n            )}\n          >\n            <MenuIcon />\n          </IconButton>\n          <Typography\n            component=\"h1\"\n            variant=\"h6\"\n            color=\"inherit\"\n            noWrap\n            className={classes.title}\n          >\n            Trends in atomistic simulation engines\n          </Typography>\n          {\n            // <IconButton color=\"inherit\">\n            //   <Badge badgeContent={4} color=\"secondary\">\n            //     <NotificationsIcon />\n            //   </Badge>\n            // </IconButton>\n          }\n        </Toolbar>\n      </AppBar>\n      <Drawer\n        variant=\"permanent\"\n        classes={{\n          paper: clsx(classes.drawerPaper, !open && classes.drawerPaperClose),\n        }}\n        open={open}\n      >\n        <div className={classes.toolbarIcon}>\n          <IconButton onClick={handleDrawerClose}>\n            <ChevronLeftIcon />\n          </IconButton>\n        </div>\n        <Divider />\n        <List>{mainListItems}</List>\n        {/* {<Divider />\n        <List>{secondaryListItems}</List>} */}\n      </Drawer>\n      <main className={classes.content}>\n        <div className={classes.appBarSpacer} />\n        <Container maxWidth=\"lg\" className={classes.container}>\n          <Router basename=\"/\">\n            {/* { <Container maxWidth={'lg'} style={{'textAlign': 'center'}}>} */}\n            <Route exact path=\"/\" component={Table} />\n            <Route exact path=\"/table\" component={Table} />\n            <Route exact path=\"/charts/:code\" component={SingleChart} />\n            <Route exact path=\"/about\" component={About} />\n            <Route exact path=\"/stats\" component={Statistics} />\n            {/* { </Container>} */}\n          </Router>\n          <Box pt={4}>\n            <Copyright />\n          </Box>\n        </Container>\n      </main>\n    </div>\n  );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport Dashboard from \"./Dashboard\";\nimport \"./style.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Dashboard />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}